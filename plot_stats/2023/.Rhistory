second_most_common_species <- names(sort(table(tree_species), decreasing = TRUE))[2]
second_max_count <- table(tree_species)[second_most_common_species]
second_percent_frequency <- second_max_count / length(tree_species) * 100
second_species_name <- switch(second_most_common_species,
"ABCO" = "White fir",
"ABLA" = "Subalpine fir",
"ACGL" = "Rocky Mountain maple",
"JUSC" = "Rocky Mountain juniper",
"PIED" = "Colorado pinyon",
"PIEN" = "Engelmann spruce",
"PIFL" = "Limber pine",
"PIPO" = "Ponderosa pine",
"POTR" = "Aspen",
"PSME" = "Douglas fir")
percent_frequency <- format(round(percent_frequency, 2), nsmall = 2)
second_percent_frequency <- format(round(second_percent_frequency, 2), nsmall = 2)
paste(species_name, " (", percent_frequency, "%), ",
second_species_name, " (", second_percent_frequency, "%)", sep = "")
} else {
percent_frequency <- format(round(percent_frequency, 2), nsmall = 2)
paste(species_name, " (", percent_frequency, "%)", sep = "")
}
})
# Step 8: Regeneration presence (Y/N)
regeneration_presence <- input_data %>%
group_by(plot) %>%
summarise(regeneration_presence = ifelse(any((size_class == "sapling" & alive_or_dead == "living") | (size_class == "seedling" & number_of_seedlings > 0)), "Regeneration present", "Regeneration absent"))
# Step 9: Seedlings per acre
seedlings_per_acre <- input_data %>%
filter(size_class == "seedling", !is.na(number_of_seedlings)) %>%
group_by(plot) %>%
summarise(seedlings_per_acre = sum(number_of_seedlings, na.rm = TRUE) * 50) %>%
right_join(distinct(select(input_data, plot)), by = "plot") %>%
mutate(seedlings_per_acre = if_else(is.na(seedlings_per_acre), 0, seedlings_per_acre))
# Step 10: Dominant regeneration species
dominant_regeneration_species <- input_data %>%
filter((size_class == "sapling" & alive_or_dead == "living") | (size_class == "seedling" & number_of_seedlings > 0)) %>%
group_by(plot, tree_species) %>%
summarise(regeneration_count = sum(size_class == "sapling") + sum(ifelse(size_class == "seedling", number_of_seedlings, 0))) %>%
group_by(plot) %>%
mutate(percent_frequency = regeneration_count / sum(regeneration_count) * 100) %>%
mutate(tree_species = case_when(
tree_species == "ABCO" ~ "White fir",
tree_species == "ABLA" ~ "Subalpine fir",
tree_species == "ACGL" ~ "Rocky Mountain maple",
tree_species == "JUSC" ~ "Rocky Mountain juniper",
tree_species == "PIED" ~ "Colorado pinyon",
tree_species == "PIEN" ~ "Engelmann spruce",
tree_species == "PIFL" ~ "Limber pine",
tree_species == "PIPO" ~ "Ponderosa pine",
tree_species == "POTR" ~ "Aspen",
tree_species == "PSME" ~ "Douglas fir",
TRUE ~ as.character(tree_species)
)) %>%
arrange(desc(percent_frequency)) %>%
summarise(dominant_regeneration_species = {
if (percent_frequency[1] <= 50) {
paste(tree_species[1], " (", round(percent_frequency[1], 2), "%), ",
tree_species[2], " (", round(percent_frequency[2], 2), "%)", sep = "")
} else {
paste(tree_species[1], " (", round(percent_frequency[1], 2), "%)", sep = "")
}
})
dominant_regeneration_species <- input_data %>%
distinct(plot) %>%
left_join(dominant_regeneration_species, by = "plot") %>%
mutate(dominant_regeneration_species = ifelse(is.na(dominant_regeneration_species), "None", dominant_regeneration_species))
# Step 11: Insect presence (Y/N)
insect_damage_presence <- input_data %>%
filter(!is.na(insect_presence)) %>%
group_by(plot) %>%
summarise(insect_damage_presence = ifelse(any(insect_presence == 1), "Insect damage present", "Insect damage absent"))
# Step 12: Browse presence (Y/N)
browse_damage_presence <- input_data %>%
filter(!is.na(browse_presence)) %>%
group_by(plot) %>%
summarise(browse_damage_presence = ifelse(any(browse_presence == 1), "Browse present", "Browse absent"))
# Step 13: List of damage types
list_damage <- input_data %>%
mutate(
what_if_any_disease_damage_present = tolower(what_if_any_disease_damage_present),
what_if_any_disease_damage_present = gsub("mechanicaldamamge", "mechanicaldamage", what_if_any_disease_damage_present),
what_if_any_disease_damage_present = gsub("woodpeckers", "woodpecker", what_if_any_disease_damage_present)
) %>%
separate_rows(what_if_any_disease_damage_present, sep = ",") %>%
mutate(
what_if_any_disease_damage_present = trimws(what_if_any_disease_damage_present),
what_if_any_disease_damage_present = case_when(
what_if_any_disease_damage_present == "barkbeetle" ~ "bark beetle",
what_if_any_disease_damage_present == "browse" ~ "browse",
what_if_any_disease_damage_present == "canker" ~ "canker",
what_if_any_disease_damage_present == "douglasfiradelgid" ~ "Douglas fir adelgid",
what_if_any_disease_damage_present == "fungus" ~ "fungus",
what_if_any_disease_damage_present == "mistletoe" ~ "mistletoe",
what_if_any_disease_damage_present == "galls" ~ "galls",
what_if_any_disease_damage_present == "gash" ~ "gash",
what_if_any_disease_damage_present == "mechanicaldamage" ~ "mechanical damage",
what_if_any_disease_damage_present == "sapsucker" ~ "sapsucker",
what_if_any_disease_damage_present == "sprucebudworm" ~ "spruce budworm",
what_if_any_disease_damage_present == "winddamage" ~ "wind damage",
what_if_any_disease_damage_present == "woodpecker" ~ "woodpecker",
what_if_any_disease_damage_present == "rot" ~ "rot",
TRUE ~ NA_character_
)
) %>%
distinct(plot, what_if_any_disease_damage_present) %>%
group_by(plot) %>%
summarise(
list_damage = if_else(all(what_if_any_disease_damage_present %in% NA), "None", paste(sort(na.omit(what_if_any_disease_damage_present)), collapse = ", "))
) %>%
mutate(
list_damage = str_to_sentence(list_damage, locale="en"),
list_damage = gsub("douglas", "Douglas", list_damage)
)
# Step 14: Merge all outputs into one dataframe
output_statistics_2023 <- Reduce(function(x, y) merge(x, y, by = "plot", all = TRUE),
list(treatment_year, treatment_type, basal_area_per_acre_in, average_dbh_in, average_height_ft, dominant_tree_species,
regeneration_presence, seedlings_per_acre, dominant_regeneration_species,
insect_damage_presence, browse_damage_presence, list_damage))
View(output_statistics_2023)
# Step 15: Write output to CSV
write.csv(output_statistics_2023, file = "/Users/harley/Documents/Github/Trinchera_summary/plot_stats/2023/2023_output_statistics.csv", row.names = FALSE)
source("~/Documents/GitHub/Trinchera_summary/stand_stats/stand.R")
View(output_statistics_2022)
# Load required libraries
library(dplyr)
library(tidyr)
library(stringr)
# Step 1: Read in raw/input CSV
input_data <- read.csv("/Users/harley/Documents/Github/Trinchera_summary/plot_stats/2022/2024Updated_2022_ForestMont_MergedData.csv")
input_data <- input_data %>%
mutate(plot = paste0(plot, "_2022"))
# Step 2: Treatment year
treatment_year <- input_data %>%
group_by(plot) %>%
summarise(treatment_year = ifelse(is.na(unique(treatment_year)) | unique(treatment_year) == 0, "Unknown", as.character(unique(treatment_year))))
# Step 3: Treatment type
## *NOTE*: before this step, go into the input_data CSV and remove special character in front of "pipu"'s and change remove all abco to remove abco
treatment_type <- input_data %>%
mutate(
treatment_type_long = tolower(treatment_type_long),
treatment_type_long = gsub("\\s+", "", treatment_type_long),
treatment_type_long = gsub("heavybudwormdamagewithtoppedpsmeandabco", "heavybudwormdamagewithdeadtoppeddfandwf", treatment_type_long),
treatment_type_long = gsub("incleanupportionremovewhitefirandcbsandmistletoepp", "inthecleanupportionremoveabco,pipu,andpipowithmistletoe", treatment_type_long),
treatment_type_long = gsub("mastecation", "mastication", treatment_type_long),
treatment_type_long = gsub("removeallabco&mistletoe", "removeallabcoandmistletoe", treatment_type_long),
treatment_type_long = gsub("removeallabcoandmistletoetrees", "removeallabcoandmistletoe", treatment_type_long),
treatment_type_long = gsub("removeallwhitefirandmistletoe", "removeallabcoandmistletoe", treatment_type_long),
treatment_type_long = gsub("removealmostallconiferfromtheriparianareaandretaincw/as", "removealmostallconiferfromriparianareasandretainpodeandpotr", treatment_type_long),
treatment_type_long = gsub("retainhealthlyppanddf", "retainhealthyponderosapineanddouglasfir", treatment_type_long),
treatment_type_long = gsub("retainhealthypipoandpsme", "retainhealthyponderosapineanddouglasfir", treatment_type_long),
treatment_type_long = gsub("shelterwoood", "shelterwood", treatment_type_long),
treatment_type_long = gsub("w/", "with", treatment_type_long),
treatment_type_long = gsub("[./]", ",", treatment_type_long),
treatment_type_long = gsub("&", "and", treatment_type_long),
treatment_type_long = gsub(":", "", treatment_type_long),
) %>%
separate_rows(treatment_type_long, sep = ",") %>%
mutate(
treatment_type_long = trimws(treatment_type_long),
treatment_type_long = case_when(
treatment_type_long == "2010heavyblowndown" ~ "heavy blow down (2010)",
treatment_type_long == "drainagewithdeadtoppedpsmeandabco" ~ "drainage with dead topped douglas fir and white fir",
treatment_type_long == "heavybudwormdamagewithdeadtoppeddfandwf" ~ "heavy budworm damage with dead topped douglas fir and white fir",
treatment_type_long == "inthecleanupportionremoveabco,pipu,andpipowithmistletoe" ~ "in the cleanup portion, remove white fir, pipu, and ponderosa pine with mistletoe",
treatment_type_long == "mastication" ~ "mastication",
treatment_type_long == "removeabco" ~ "remove all white fir",
treatment_type_long == "removeallabcoandmistletoe" ~ "remove all white fir and mistletoe",
treatment_type_long == "removeallwhitefir,rmj,andlargepoorlyformeddf" ~ "remove all whitefir, rocky mountain juniper, and large poorly formed douglas fir",
treatment_type_long == "removeallwhitefiranddougfir<14\"dbhandlargeifsufficientseedtreesinthearea" ~ "remove all white fir and douglas fir with <14\" dbh and large if sufficient seed trees in the area",
treatment_type_long == "removealldefiguredabcowith14\"dbhandlargerifsufficentseedtreesinarea" ~ "remove all defigured white fir with â‰¥14\" dbh if sufficent seed trees in area",
treatment_type_long == "removealmostallconiferfromriparianareasandretainpodeandpotr" ~ "remove almost all conifer from riparian areas and retain cottonwood and aspen",
treatment_type_long == "removemistletoe" ~ "remove all mistletoe",
treatment_type_long == "retainaspen,ponderosapine,andyoungdf" ~ "retain aspen, ponderosa pine, and young douglas fir",
treatment_type_long == "retainhealthyponderosapineanddouglasfir" ~ "retain healthy ponderosa pine and douglas fir",
treatment_type_long == "salvage" ~ "salvage",
treatment_type_long == "shelterwood" ~ "shelterwood",
treatment_type_long == "thinfrombelow" ~ "thin from below",
TRUE ~ NA_character_
)
) %>%
distinct(plot, treatment_type_long) %>%
group_by(plot) %>%
summarise(
treatment_type = if_else(all(treatment_type_long %in% NA), "Unknown", paste(sort(na.omit(treatment_type_long)), collapse = "; "))
) %>%
mutate(
treatment_type = str_to_sentence(treatment_type, locale="en"),
treatment_type = gsub("douglas", "Douglas", treatment_type),
treatment_type = gsub("rocky mountain", "Rocky Mountain", treatment_type),
treatment_type = gsub("dbh", "DBH", treatment_type)
)
# Step 4: Basal area per acre (in)
basal_area_per_acre_in <- input_data %>%
filter(living_dead == "L", !is.na(dbh)) %>%
group_by(plot) %>%
summarise(basal_area_per_acre_in = round(sum(0.005454 * (dbh/2.54)^2) * 5, 2))
# Step 5: Average DBH (in)
average_dbh_in <- input_data %>%
filter(living_dead == "L", !is.na(dbh)) %>%
group_by(plot) %>%
summarise(average_dbh_in = round(mean(dbh) / 2.54, 2))
# Step 6: Average height (ft)
average_height_ft <- input_data %>%
filter(living_dead == "L", !is.na(total_height)) %>%
group_by(plot) %>%
summarise(average_height_ft = round(mean(total_height) * 3.28084, 2))
# Step 7: Dominant tree species
dominant_tree_species <- input_data %>%
filter(living_dead == "L", size_class == "tree", !is.na(species)) %>%
group_by(plot) %>%
summarise(dominant_tree_species = {
species_counts <- table(species)
max_count <- max(species_counts)
most_common_species <- names(species_counts)[species_counts == max_count]
percent_frequency <- max_count / length(species) * 100
species_name <- switch(most_common_species[1],
"ABCO" = "White fir",
"ABLA" = "Subalpine fir",
"ACGL" = "Rocky Mountain maple",
"JUSC" = "Rocky Mountain juniper",
"PIED" = "Colorado pinyon",
"PIEN" = "Engelmann spruce",
"PIFL" = "Limber pine",
"PIPO" = "Ponderosa pine",
"POTR" = "Aspen",
"PSME" = "Douglas fir")
if (percent_frequency <= 50) {
second_most_common_species <- names(sort(table(species), decreasing = TRUE))[2]
second_max_count <- table(species)[second_most_common_species]
second_percent_frequency <- second_max_count / length(species) * 100
second_species_name <- switch(second_most_common_species,
"ABCO" = "White fir",
"ABLA" = "Subalpine fir",
"ACGL" = "Rocky Mountain maple",
"JUSC" = "Rocky Mountain juniper",
"PIED" = "Colorado pinyon",
"PIEN" = "Engelmann spruce",
"PIFL" = "Limber pine",
"PIPO" = "Ponderosa pine",
"POTR" = "Aspen",
"PSME" = "Douglas fir")
percent_frequency <- format(round(percent_frequency, 2), nsmall = 2)
second_percent_frequency <- format(round(second_percent_frequency, 2), nsmall = 2)
paste(species_name, " (", percent_frequency, "%), ",
second_species_name, " (", second_percent_frequency, "%)", sep = "")
} else {
percent_frequency <- format(round(percent_frequency, 2), nsmall = 2)
paste(species_name, " (", percent_frequency, "%)", sep = "")
}
})
# Step 8: Regeneration presence (Y/N)
regeneration_presence <- input_data %>%
group_by(plot) %>%
summarise(regeneration_presence = ifelse(any((size_class == "sapling" & living_dead == "L") | (size_class == "seedling" & count_seedling > 0)), "Regeneration present", "Regeneration absent"))
# Step 9: Seedlings per acre
seedlings_per_acre <- input_data %>%
filter(size_class == "seedling", !is.na(count_seedling)) %>%
group_by(plot) %>%
summarise(seedlings_per_acre = sum(count_seedling, na.rm = TRUE) * 50) %>%
right_join(distinct(select(input_data, plot)), by = "plot") %>%
mutate(seedlings_per_acre = if_else(is.na(seedlings_per_acre), 0, seedlings_per_acre))
# Step 10: Dominant regeneration species
dominant_regeneration_species <- input_data %>%
filter((size_class == "sapling" & living_dead == "L") | (size_class == "seedling" & count_seedling > 0)) %>%
group_by(plot, species) %>%
summarise(regeneration_count = sum(size_class == "sapling") + sum(ifelse(size_class == "seedling", count_seedling, 0))) %>%
group_by(plot) %>%
mutate(percent_frequency = regeneration_count / sum(regeneration_count) * 100,
species = case_when(
species == "ABCO" ~ "White fir",
species == "ABLA" ~ "Subalpine fir",
species == "ACGL" ~ "Rocky Mountain maple",
species == "JUSC" ~ "Rocky Mountain juniper",
species == "PIED" ~ "Colorado pinyon",
species == "PIEN" ~ "Engelmann spruce",
species == "PIFL" ~ "Limber pine",
species == "PIPO" ~ "Ponderosa pine",
species == "POTR" ~ "Aspen",
species == "PSME" ~ "Douglas fir",
TRUE ~ as.character(species)
)) %>%
arrange(desc(percent_frequency)) %>%
summarise(dominant_regeneration_species = {
if (percent_frequency[1] <= 50) {
paste(species[1], " (", round(percent_frequency[1], 2), "%), ",
species[2], " (", round(percent_frequency[2], 2), "%)", sep = "")
} else {
paste(species[1], " (", round(percent_frequency[1], 2), "%)", sep = "")
}
})
dominant_regeneration_species <- input_data %>%
distinct(plot) %>%
left_join(dominant_regeneration_species, by = "plot") %>%
mutate(dominant_regeneration_species = ifelse(is.na(dominant_regeneration_species), "None", dominant_regeneration_species))
# Step 11: Insect presence (Y/N)
insect_damage_presence <- input_data %>%
filter(!is.na(insect_disease)) %>%
group_by(plot) %>%
summarise(insect_damage_presence = ifelse(any(insect_disease == 1), "Insect damage present", "Insect damage absent"))
# Step 12: Browse presence (Y/N)
browse_damage_presence <- input_data %>%
filter(!is.na(browsing_damage)) %>%
group_by(plot) %>%
summarise(browse_damage_presence = ifelse(any(browsing_damage == 1), "Browse present", "Browse absent"))
# Step 13: Merge all outputs into one dataframe
output_statistics_2022 <- Reduce(function(x, y) merge(x, y, by = "plot", all = TRUE),
list(treatment_year, treatment_type, basal_area_per_acre_in, average_dbh_in, average_height_ft, dominant_tree_species,
regeneration_presence, seedlings_per_acre, dominant_regeneration_species,
insect_damage_presence, browse_damage_presence))
output_statistics_2022 <- output_statistics_2022 %>%
mutate(basal_area_per_acre_in = ifelse(is.na(basal_area_per_acre_in), "No live adult trees present", basal_area_per_acre_in),
average_dbh_in = ifelse(is.na(average_dbh_in), "No live adult trees present", average_dbh_in),
average_height_ft = ifelse(is.na(average_height_ft), "No live adult trees present", average_height_ft),
dominant_tree_species = ifelse(is.na(dominant_tree_species), "No live adult trees present", dominant_tree_species),
regeneration_presence = ifelse(is.na(regeneration_presence), "Regeneration absent", regeneration_presence))
# Step 14: Write output to CSV
write.csv(output_summary_2022, file = "/Users/harley/Documents/Github/Trinchera_summary/plot_stats/2022/2022_output_summary.csv", row.names = FALSE)
# Step 13: Merge all outputs into one dataframe
output_summary_2022 <- Reduce(function(x, y) merge(x, y, by = "plot", all = TRUE),
list(treatment_year, treatment_type, basal_area_per_acre_in, average_dbh_in, average_height_ft, dominant_tree_species,
regeneration_presence, seedlings_per_acre, dominant_regeneration_species,
insect_damage_presence, browse_damage_presence))
output_summary_2022 <- output_summary_2022 %>%
mutate(basal_area_per_acre_in = ifelse(is.na(basal_area_per_acre_in), "No live adult trees present", basal_area_per_acre_in),
average_dbh_in = ifelse(is.na(average_dbh_in), "No live adult trees present", average_dbh_in),
average_height_ft = ifelse(is.na(average_height_ft), "No live adult trees present", average_height_ft),
dominant_tree_species = ifelse(is.na(dominant_tree_species), "No live adult trees present", dominant_tree_species),
regeneration_presence = ifelse(is.na(regeneration_presence), "Regeneration absent", regeneration_presence))
# Step 14: Write output to CSV
write.csv(output_summary_2022, file = "/Users/harley/Documents/Github/Trinchera_summary/plot_stats/2022/2022_output_summary.csv", row.names = FALSE)
# Load required libraries
library(dplyr)
library(tidyr)
library(stringr)
# Step 1: Read in raw/input CSV
input_data <- read.csv("/Users/harley/Documents/Github/Trinchera_summary/plot_stats/2023/cleanedMerged_Forestry23_030524_2.csv")
input_data <- input_data %>%
rename(plot = new_plot_key)
# Step 2: Treatment year
treatment_year <- input_data %>%
group_by(plot) %>%
summarise(treatment_year = ifelse(is.na(unique(treatment_year)) | unique(treatment_year) == 0, "Unknown", as.character(unique(treatment_year))))
# Step 3: Treatment type
treatment_type <- input_data %>%
separate_rows(short_description_of_treament, sep = ",") %>%
mutate(short_description_of_treament = trimws(short_description_of_treament)) %>%
mutate(short_description_of_treament = case_when(
short_description_of_treament == "THIN_FROM_BELOW" ~ "thin from below",
TRUE ~ NA_character_
)) %>%
distinct(plot, short_description_of_treament) %>%
group_by(plot) %>%
summarise(treatment_type = if_else(all(short_description_of_treament %in% NA), "Unknown", paste(sort(na.omit(short_description_of_treament)), collapse = "; "))) %>%
mutate(treatment_type = str_to_sentence(treatment_type, locale="en"))
# Step 4: Basal area per acre (in)
basal_area_per_acre_in <- input_data %>%
filter(alive_or_dead == "living", !is.na(dbh_cm_tree)) %>%
group_by(plot) %>%
summarise(basal_area_per_acre_in = round(sum(0.005454 * (dbh_cm_tree/2.54)^2) * 5, 2))
# Step 5: Average DBH (in)
average_dbh_in <- input_data %>%
filter(alive_or_dead == "living", !is.na(dbh_cm_tree)) %>%
group_by(plot) %>%
summarise(average_dbh_in = round(mean(dbh_cm_tree) / 2.54, 2))
# Step 6: Average height (ft)
average_height_ft <- input_data %>%
filter(alive_or_dead == "living", !is.na(total_height_m_tree)) %>%
group_by(plot) %>%
summarise(average_height_ft = round(mean(total_height_m_tree) * 3.28084, 2))
# Step 7: Dominant tree species
dominant_tree_species <- input_data %>%
filter(alive_or_dead == "living", size_class == "tree", !is.na(tree_species)) %>%
group_by(plot) %>%
summarise(dominant_tree_species = {
species_counts <- table(tree_species)
max_count <- max(species_counts)
most_common_species <- names(species_counts)[species_counts == max_count]
percent_frequency <- max_count / length(tree_species) * 100
species_name <- switch(most_common_species[1],
"ABCO" = "White fir",
"ABLA" = "Subalpine fir",
"ACGL" = "Rocky Mountain maple",
"JUSC" = "Rocky Mountain juniper",
"PIED" = "Colorado pinyon",
"PIEN" = "Engelmann spruce",
"PIFL" = "Limber pine",
"PIPO" = "Ponderosa pine",
"POTR" = "Aspen",
"PSME" = "Douglas fir")
if (percent_frequency <= 50) {
second_most_common_species <- names(sort(table(tree_species), decreasing = TRUE))[2]
second_max_count <- table(tree_species)[second_most_common_species]
second_percent_frequency <- second_max_count / length(tree_species) * 100
second_species_name <- switch(second_most_common_species,
"ABCO" = "White fir",
"ABLA" = "Subalpine fir",
"ACGL" = "Rocky Mountain maple",
"JUSC" = "Rocky Mountain juniper",
"PIED" = "Colorado pinyon",
"PIEN" = "Engelmann spruce",
"PIFL" = "Limber pine",
"PIPO" = "Ponderosa pine",
"POTR" = "Aspen",
"PSME" = "Douglas fir")
percent_frequency <- format(round(percent_frequency, 2), nsmall = 2)
second_percent_frequency <- format(round(second_percent_frequency, 2), nsmall = 2)
paste(species_name, " (", percent_frequency, "%), ",
second_species_name, " (", second_percent_frequency, "%)", sep = "")
} else {
percent_frequency <- format(round(percent_frequency, 2), nsmall = 2)
paste(species_name, " (", percent_frequency, "%)", sep = "")
}
})
# Step 8: Regeneration presence (Y/N)
regeneration_presence <- input_data %>%
group_by(plot) %>%
summarise(regeneration_presence = ifelse(any((size_class == "sapling" & alive_or_dead == "living") | (size_class == "seedling" & number_of_seedlings > 0)), "Regeneration present", "Regeneration absent"))
# Step 9: Seedlings per acre
seedlings_per_acre <- input_data %>%
filter(size_class == "seedling", !is.na(number_of_seedlings)) %>%
group_by(plot) %>%
summarise(seedlings_per_acre = sum(number_of_seedlings, na.rm = TRUE) * 50) %>%
right_join(distinct(select(input_data, plot)), by = "plot") %>%
mutate(seedlings_per_acre = if_else(is.na(seedlings_per_acre), 0, seedlings_per_acre))
# Step 10: Dominant regeneration species
dominant_regeneration_species <- input_data %>%
filter((size_class == "sapling" & alive_or_dead == "living") | (size_class == "seedling" & number_of_seedlings > 0)) %>%
group_by(plot, tree_species) %>%
summarise(regeneration_count = sum(size_class == "sapling") + sum(ifelse(size_class == "seedling", number_of_seedlings, 0))) %>%
group_by(plot) %>%
mutate(percent_frequency = regeneration_count / sum(regeneration_count) * 100) %>%
mutate(tree_species = case_when(
tree_species == "ABCO" ~ "White fir",
tree_species == "ABLA" ~ "Subalpine fir",
tree_species == "ACGL" ~ "Rocky Mountain maple",
tree_species == "JUSC" ~ "Rocky Mountain juniper",
tree_species == "PIED" ~ "Colorado pinyon",
tree_species == "PIEN" ~ "Engelmann spruce",
tree_species == "PIFL" ~ "Limber pine",
tree_species == "PIPO" ~ "Ponderosa pine",
tree_species == "POTR" ~ "Aspen",
tree_species == "PSME" ~ "Douglas fir",
TRUE ~ as.character(tree_species)
)) %>%
arrange(desc(percent_frequency)) %>%
summarise(dominant_regeneration_species = {
if (percent_frequency[1] <= 50) {
paste(tree_species[1], " (", round(percent_frequency[1], 2), "%), ",
tree_species[2], " (", round(percent_frequency[2], 2), "%)", sep = "")
} else {
paste(tree_species[1], " (", round(percent_frequency[1], 2), "%)", sep = "")
}
})
dominant_regeneration_species <- input_data %>%
distinct(plot) %>%
left_join(dominant_regeneration_species, by = "plot") %>%
mutate(dominant_regeneration_species = ifelse(is.na(dominant_regeneration_species), "None", dominant_regeneration_species))
# Step 11: Insect presence (Y/N)
insect_damage_presence <- input_data %>%
filter(!is.na(insect_presence)) %>%
group_by(plot) %>%
summarise(insect_damage_presence = ifelse(any(insect_presence == 1), "Insect damage present", "Insect damage absent"))
# Step 12: Browse presence (Y/N)
browse_damage_presence <- input_data %>%
filter(!is.na(browse_presence)) %>%
group_by(plot) %>%
summarise(browse_damage_presence = ifelse(any(browse_presence == 1), "Browse present", "Browse absent"))
# Step 13: List of damage types
list_damage <- input_data %>%
mutate(
what_if_any_disease_damage_present = tolower(what_if_any_disease_damage_present),
what_if_any_disease_damage_present = gsub("mechanicaldamamge", "mechanicaldamage", what_if_any_disease_damage_present),
what_if_any_disease_damage_present = gsub("woodpeckers", "woodpecker", what_if_any_disease_damage_present)
) %>%
separate_rows(what_if_any_disease_damage_present, sep = ",") %>%
mutate(
what_if_any_disease_damage_present = trimws(what_if_any_disease_damage_present),
what_if_any_disease_damage_present = case_when(
what_if_any_disease_damage_present == "barkbeetle" ~ "bark beetle",
what_if_any_disease_damage_present == "browse" ~ "browse",
what_if_any_disease_damage_present == "canker" ~ "canker",
what_if_any_disease_damage_present == "douglasfiradelgid" ~ "Douglas fir adelgid",
what_if_any_disease_damage_present == "fungus" ~ "fungus",
what_if_any_disease_damage_present == "mistletoe" ~ "mistletoe",
what_if_any_disease_damage_present == "galls" ~ "galls",
what_if_any_disease_damage_present == "gash" ~ "gash",
what_if_any_disease_damage_present == "mechanicaldamage" ~ "mechanical damage",
what_if_any_disease_damage_present == "sapsucker" ~ "sapsucker",
what_if_any_disease_damage_present == "sprucebudworm" ~ "spruce budworm",
what_if_any_disease_damage_present == "winddamage" ~ "wind damage",
what_if_any_disease_damage_present == "woodpecker" ~ "woodpecker",
what_if_any_disease_damage_present == "rot" ~ "rot",
TRUE ~ NA_character_
)
) %>%
distinct(plot, what_if_any_disease_damage_present) %>%
group_by(plot) %>%
summarise(
list_damage = if_else(all(what_if_any_disease_damage_present %in% NA), "None", paste(sort(na.omit(what_if_any_disease_damage_present)), collapse = ", "))
) %>%
mutate(
list_damage = str_to_sentence(list_damage, locale="en"),
list_damage = gsub("douglas", "Douglas", list_damage)
)
# Step 14: Merge all outputs into one dataframe
output_summary_2023 <- Reduce(function(x, y) merge(x, y, by = "plot", all = TRUE),
list(treatment_year, treatment_type, basal_area_per_acre_in, average_dbh_in, average_height_ft, dominant_tree_species,
regeneration_presence, seedlings_per_acre, dominant_regeneration_species,
insect_damage_presence, browse_damage_presence, list_damage))
# Step 15: Write output to CSV
write.csv(output_summary_2023, file = "/Users/harley/Documents/Github/Trinchera_summary/plot_stats/2023/2023_output_summary.csv", row.names = FALSE)
